/**************************************************
 * üéÆ MENU & UI KH·ªûI T·∫†O
 **************************************************/

// Khi m·ªü file Google Sheets ‚Üí t·∫°o menu "Game"
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu("Sudoku") // menu ri√™ng
    .addItem("V√°n m·ªõi", "startNewSudoku")
    .addItem("ƒê√°p √°n", "showSudokuAnswerDialog")
    .addItem("G·ª£i √Ω", "showSudokuHintDialog")
    .addItem("Ki·ªÉm tra l·ªùi gi·∫£i", "checkFullSolution")
    .addToUi();
}

// Hi·ªán dialog xem ƒë√°p √°n
function showSudokuAnswerDialog() {
  var html = HtmlService.createHtmlOutputFromFile("answerDialog")
    .setWidth(400)
    .setHeight(300);
  SpreadsheetApp.getUi().showModalDialog(html, "ƒê√°p √°n");
}

// Hi·ªán dialog g·ª£i √Ω
function showSudokuHintDialog() {
  var html = HtmlService.createHtmlOutputFromFile("hintDialog")
    .setWidth(400)
    .setHeight(300);
  SpreadsheetApp.getUi().showModalDialog(html, "G·ª£i √Ω");
}


/**************************************************
 * üìù V·∫º & X·ª¨ L√ù L∆Ø·ªöI SUDOKU
 **************************************************/

// V·∫Ω Sudoku m·ªõi v√†o sheet
function drawSudoku(level) {
  var lastPuzzleStr = PropertiesService.getScriptProperties().getProperty("SUDOKU_PUZZLE");
  var lastPuzzle = lastPuzzleStr ? JSON.parse(lastPuzzleStr) : null;

  var data, puzzle, solution;
  var maxTries = 5; // tr√°nh v√≤ng l·∫∑p v√¥ t·∫≠n

  for (var i = 0; i < maxTries; i++) {
    data = getSudokuFromGemini(level);
    puzzle = data.puzzle;
    solution = data.solution;

    if (!lastPuzzle || !isSamePuzzle(puzzle, lastPuzzle)) break;
  }

  if (!puzzle) throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c puzzle m·ªõi t·ª´ Gemini");

  // L∆∞u puzzle v√† solution
  PropertiesService.getScriptProperties().setProperty("SUDOKU_PUZZLE", JSON.stringify(puzzle));
  PropertiesService.getScriptProperties().setProperty("SUDOKU_SOLUTION", JSON.stringify(solution));

  // T·∫°o ho·∫∑c l·∫•y sheet Sudoku
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("SUDOKU");
  if (!sheet) sheet = SpreadsheetApp.getActiveSpreadsheet().insertSheet("SUDOKU");

  var startRow = 4, startCol = 3;

  // ƒêi·ªÅn d·ªØ li·ªáu Sudoku
  for (var r = 0; r < 9; r++) {
    for (var c = 0; c < 9; c++) {
      var cell = sheet.getRange(startRow + r, startCol + c);
      if (puzzle[r][c] !== 0) {
        cell.setValue(puzzle[r][c]).setBackground("#d9d9d9");
      } else {
        cell.setValue("").setBackground(null);
      }
      cell.setHorizontalAlignment("center")
        .setVerticalAlignment("middle")
        .setFontWeight("bold");
    }
  }

  // CƒÉn ch·ªânh b·∫£ng v√† vi·ªÅn
  sheet.setColumnWidths(startCol, 9, 30);
  sheet.setRowHeights(startRow, 9, 30);
  sheet.getRange(startRow, startCol, 9, 9).setBorder(true, true, true, true, true, true);

  // V·∫Ω vi·ªÅn ƒë·∫≠m cho t·ª´ng block 3x3
  for (var i = 0; i < 3; i++) {
    for (var j = 0; j < 3; j++) {
      sheet.getRange(startRow + i*3, startCol + j*3, 3, 3)
        .setBorder(true, true, true, true, null, null, "black", SpreadsheetApp.BorderStyle.SOLID_MEDIUM);
    }
  }
}

// So s√°nh 2 puzzle
function isSamePuzzle(p1, p2) {
  if (!p1 || !p2) return false;
  for (var r = 0; r < 9; r++) {
    for (var c = 0; c < 9; c++) {
      if (p1[r][c] !== p2[r][c]) return false;
    }
  }
  return true;
}


/**************************************************
 * ü§ñ L·∫§Y D·ªÆ LI·ªÜU T·ª™ GEMINI API
 **************************************************/

// G·ªçi Gemini API ƒë·ªÉ t·∫°o Sudoku m·ªõi
function getSudokuFromGemini(level) {
  var apiKey = PropertiesService.getScriptProperties().getProperty("GEMINI_API_KEY");
  if (!apiKey) throw new Error("Ch∆∞a c·∫•u h√¨nh GEMINI_API_KEY trong Script Properties");

  var prompt = `
H√£y tr·∫£ v·ªÅ duy nh·∫•t m·ªôt ƒë·ªëi t∆∞·ª£ng JSON bi·ªÉu di·ªÖn m·ªôt tr√≤ ch∆°i Sudoku 9x9 m·ª©c d·ªÖ.
Quy t·∫Øc:
- Kh√¥ng th√™m gi·∫£i th√≠ch, kh√¥ng th√™m ch·ªØ n√†o ngo√†i JSON.
- JSON g·ªìm: "title", "size", "difficulty", "puzzle", "solution".
- "difficulty" = "${level}".
- "puzzle": ma tr·∫≠n 9x9 (0 l√† √¥ tr·ªëng).
- "solution": l·ªùi gi·∫£i ƒë·∫ßy ƒë·ªß 9x9.
`;

  var url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=" + apiKey;
  var payload = { contents: [{ parts: [{ text: prompt }]}] };

  var res = UrlFetchApp.fetch(url, {
    method: "post",
    contentType: "application/json",
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  var json = JSON.parse(res.getContentText());

  try {
    var text = json.candidates[0].content.parts[0].text;
    text = text.replace(/```json|```/g, "").trim(); // lo·∫°i b·ªè markdown
    return JSON.parse(text);
  } catch (e) {
    throw new Error("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c JSON t·ª´ Gemini: " + res.getContentText());
  }
}


/**************************************************
 * ‚è≥ QU·∫¢N L√ù TR·∫†NG TH√ÅI & LOADING
 **************************************************/

function showLoadingModal() {
  var html = HtmlService.createHtmlOutputFromFile("loadingDialog")
    .setWidth(360).setHeight(140);
  SpreadsheetApp.getUi().showModalDialog(html, "ƒêang x·ª≠ l√Ω");
}

function checkSudokuStatus() {
  var status = PropertiesService.getScriptProperties().getProperty("SUDOKU_STATUS");
  return status || "idle";
}

// B·∫Øt ƒë·∫ßu v√°n Sudoku m·ªõi
function startNewSudoku() {
  var html = HtmlService.createHtmlOutputFromFile("difficultyDialog")
    .setWidth(300)
    .setHeight(200);
  SpreadsheetApp.getUi().showModalDialog(html, "Ch·ªçn ƒë·ªô kh√≥");
}

// T·∫°o Sudoku v·ªõi ƒë·ªô kh√≥ ƒë∆∞·ª£c ch·ªçn
function createSudokuWithDifficulty(level) {
  PropertiesService.getScriptProperties().setProperty("SUDOKU_STATUS", "loading");
  showLoadingModal();

  try {
    drawSudoku(level);  // g·ªçi b·∫£n m·ªõi c√≥ tham s·ªë
    PropertiesService.getScriptProperties().setProperty("SUDOKU_STATUS", "done");
  } catch (e) {
    PropertiesService.getScriptProperties().setProperty("SUDOKU_STATUS", "error");
    throw e;
  }
}


/**************************************************
 * ‚úÖ ƒê√ÅP √ÅN & G·ª¢I √ù
 **************************************************/

// ƒêi·ªÅn l·ªùi gi·∫£i Sudoku
function getSudokuSolution() {
  var props = PropertiesService.getScriptProperties(); 
  var puzzleStr = props.getProperty("SUDOKU_PUZZLE");
  var solutionStr = props.getProperty("SUDOKU_SOLUTION");

  if (!puzzleStr || !solutionStr) throw new Error("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu puzzle/solution!");

  var puzzle = JSON.parse(puzzleStr);
  var solution = JSON.parse(solutionStr);

  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("SUDOKU");
  if (!sheet) throw new Error("‚ùå Ch∆∞a c√≥ sheet SUDOKU!");

  var startRow = 4, startCol = 3;

  for (var r = 0; r < 9; r++) {
    for (var c = 0; c < 9; c++) {
      var cell = sheet.getRange(startRow + r, startCol + c);
      if (puzzle[r][c] !== 0) {
        cell.setValue(puzzle[r][c]).setBackground("#d9d9d9");
      } else {
        cell.setValue(solution[r][c]).setBackground("#fff2cc");
      }
      cell.setHorizontalAlignment("center").setVerticalAlignment("middle").setFontWeight("bold");
    }
  }
}

// L·∫•y g·ª£i √Ω cho 1 √¥ (row, col)
function getSudokuHintForCell(row, col) {
  var apiKey = PropertiesService.getScriptProperties().getProperty("GEMINI_API_KEY");
  if (!apiKey) throw new Error("Ch∆∞a c·∫•u h√¨nh GEMINI_API_KEY trong Script Properties");

  var puzzleStr = PropertiesService.getScriptProperties().getProperty("SUDOKU_PUZZLE");
  if (!puzzleStr) throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y puzzle g·ªëc!");
  var puzzle = JSON.parse(puzzleStr);

  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("SUDOKU");
  if (!sheet) throw new Error("‚ùå Ch∆∞a c√≥ sheet SUDOKU!");

  var startRow = 4, startCol = 3;
  var current = JSON.parse(JSON.stringify(puzzle));

  // L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i c·ªßa ng∆∞·ªùi ch∆°i
  for (var r = 0; r < 9; r++) {
    for (var c = 0; c < 9; c++) {
      var val = sheet.getRange(startRow + r, startCol + c).getValue();
      if (puzzle[r][c] === 0 && val) current[r][c] = Number(val);
    }
  }

  if (puzzle[row-1][col-1] !== 0) {
    throw new Error("√î (" + row + "," + col + ") kh√¥ng ph·∫£i √¥ c·∫ßn gi·∫£i!");
  }

  var puzzleStr = PropertiesService.getScriptProperties().getProperty("SUDOKU_PUZZLE");
  var solutionStr = PropertiesService.getScriptProperties().getProperty("SUDOKU_SOLUTION");

  var prompt = `
Ph√¢n t√≠ch Sudoku hi·ªán t·∫°i:
${JSON.stringify(current)}

ƒê·ªÅ b√†i Sudoku g·ªëc (c√°c √¥ tr·ªëng l√† 0):
${puzzleStr}

ƒê√°p √°n c·ªßa ƒë·ªÅ b√†i:
${solutionStr};

Y√™u c·∫ßu:
- √î c·∫ßn xem x√©t: h√†ng ${row}, c·ªôt ${col}.
- D·ªØ li·ªáu Sudoku hi·ªán t·∫°i c√≥ th·ªÉ ch·ª©a l·ªói do ng∆∞·ªùi ch∆°i nh·∫≠p sai.
- H√£y ki·ªÉm tra gi√° tr·ªã t·∫°i √¥ n√†y xem c√≥ ƒë√∫ng v·ªõi l·ªùi gi·∫£i Sudoku h·ª£p l·ªá hay kh√¥ng (d·ª±a tr√™n to√†n b·ªô c·∫•u tr√∫c Sudoku h·ª£p l·ªá, kh√¥ng ch·ªâ quy t·∫Øc h√†ng/c·ªôt/kh·ªëi).
- N·∫øu √¥ tr·ªëng (0 ho·∫∑c r·ªóng): h√£y g·ª£i √Ω s·ªë ƒë√∫ng c·∫ßn ƒëi·ªÅn.
- N·∫øu √¥ c√≥ gi√° tr·ªã sai: h√£y n√≥i "Sai", gi·∫£i th√≠ch v√¨ sao sai (ch·ªâ ra h√†ng, c·ªôt, ho·∫∑c kh·ªëi n√†o b·ªã tr√πng s·ªë, v√≠ d·ª• ‚Äúh√†ng 2 c√≥ hai s·ªë 3‚Äù, ‚Äúkh·ªëi 3x3 ch·ª©a hai s·ªë 5‚Äù), v√† g·ª£i √Ω s·ªë ƒë√∫ng.
- N·∫øu √¥ ƒë√∫ng: h√£y n√≥i "ƒê√∫ng", k√®m gi·∫£i th√≠ch ng·∫Øn g·ªçn (kh√¥ng d√πng t·ª´ ‚Äúsai‚Äù hay ƒë·ªìng nghƒ©a c·ªßa n√≥).
- Tr·∫£ l·ªùi ng·∫Øn g·ªçn, b·∫±ng ti·∫øng Vi·ªát.
`;

  var url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=" + apiKey;
  var payload = { contents: [{ parts: [{ text: prompt }]}] };

  var res = UrlFetchApp.fetch(url, {
    method: "post",
    contentType: "application/json",
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  var json = JSON.parse(res.getContentText());
  var hint;
  try {
    hint = json.candidates[0].content.parts[0].text.trim();
  } catch (e) {
    throw new Error("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini: " + res.getContentText());
  }

  // X√°c ƒë·ªãnh √¥ tr√™n sheet t∆∞∆°ng ·ª©ng
  var targetRange = sheet.getRange(startRow + (row - 1), startCol + (col - 1));
  var targetVal = targetRange.getValue();

  // Ki·ªÉm tra xem Gemini c√≥ n√≥i √¥ sai hay kh√¥ng b·∫±ng m·ªôt s·ªë t·ª´ kh√≥a ti·∫øng Vi·ªát/Anh
  var incorrectPattern = /\b(sai|kh√¥ng ƒë√∫ng|kh√¥ng ch√≠nh x√°c|kh√¥ng h·ª£p l·ªá|nh·∫ßm|wrong|incorrect)\b/i;
  if (incorrectPattern.test(hint) && targetVal !== "" && targetVal !== null) {
    // T√¥ ƒë·ªè √¥ nh·∫≠p sai
    targetRange.setBackground("#ff9999");
  } else {
    // N·∫øu kh√¥ng ph√°t hi·ªán sai, reset n·ªÅn √¥ v·ªÅ tr·∫Øng (ho·∫∑c b·∫°n c√≥ th·ªÉ ƒë·ªïi th√†nh n·ªÅn kh√°c tu·ª≥ th√≠ch)
    targetRange.setBackground("white");
  }

  return hint;
}


/**************************************************
 * ‚úèÔ∏è KI·ªÇM TRA K·∫æT QU·∫¢
 **************************************************/

function checkFullSolution() {
  var ui = SpreadsheetApp.getUi();

  var props = PropertiesService.getScriptProperties();
  var puzzleStr = props.getProperty("SUDOKU_PUZZLE");
  var solutionStr = props.getProperty("SUDOKU_SOLUTION");

  if (!puzzleStr || !solutionStr) {
    ui.alert("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu Sudoku! H√£y t·∫°o v√°n m·ªõi tr∆∞·ªõc.");
    return;
  }

  var puzzle = JSON.parse(puzzleStr);
  var solution = JSON.parse(solutionStr);

  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("SUDOKU");
  if (!sheet) {
    ui.alert("‚ùå Kh√¥ng t√¨m th·∫•y sheet SUDOKU!");
    return;
  }

  var startRow = 4, startCol = 3;
  var isComplete = true;
  var isCorrect = true;

  // Reset to√†n b·ªô b·∫£ng (√¥ g·ªëc = x√°m, √¥ tr·ªëng = tr·∫Øng)
  for (var r = 0; r < 9; r++) {
    for (var c = 0; c < 9; c++) {
      var cell = sheet.getRange(startRow + r, startCol + c);
      if (puzzle[r][c] !== 0) {
        // √î g·ªëc (gi·ªØ m√†u x√°m)
        cell.setBackground("#dddddd");
      } else {
        // √î nh·∫≠p li·ªáu (reset v·ªÅ tr·∫Øng)
        cell.setBackground("white");
      }
    }
  }

  // Ki·ªÉm tra t·ª´ng √¥
  for (var r = 0; r < 9; r++) {
    for (var c = 0; c < 9; c++) {
      var cell = sheet.getRange(startRow + r, startCol + c);
      var val = cell.getValue();

      if (puzzle[r][c] === 0) {
        if (val === "" || val === null) {
          isComplete = false;
        } else if (Number(val) !== solution[r][c]) {
          isCorrect = false;
          // ‚ùå t√¥ ƒë·ªè √¥ sai
          cell.setBackground("#ff9999");
        }
      }
    }
  }

  if (!isComplete) {
    ui.alert("‚ö†Ô∏è C√≤n √¥ tr·ªëng ‚Äî h√£y ho√†n th√†nh v√°n!");
    props.setProperty("SUDOKU_STATUS", "idle");
    return;
  }

  props.setProperty("SUDOKU_STATUS", isCorrect ? "win" : "idle");

  if (isCorrect) {
    ui.alert("üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ gi·∫£i ƒë√∫ng!");
  } else {
    ui.alert("‚ùå C√≥ l·ªói sai ‚Äî h√£y ki·ªÉm tra l·∫°i!");
  }
}



/**************************************************
 * ‚úèÔ∏è S·ª∞ KI·ªÜN EDIT & KI·ªÇM TRA HO√ÄN TH√ÄNH
 **************************************************/

function onEdit(e) {
  try {
    var props = PropertiesService.getScriptProperties();
    var puzzleStr = props.getProperty("SUDOKU_PUZZLE");
    var solutionStr = props.getProperty("SUDOKU_SOLUTION");
    if (!puzzleStr || !solutionStr) return;

    var puzzle = JSON.parse(puzzleStr);
    var solution = JSON.parse(solutionStr);

    var sheet = e.range.getSheet();
    if (sheet.getName() !== "SUDOKU") return;

    var startRow = 4, startCol = 3;
    var editRow = e.range.getRow(), editCol = e.range.getColumn();

    // X·ª≠ l√Ω kh√≥a √¥ g·ªëc
    for (var i = 0; i < e.range.getNumRows(); i++) {
      for (var j = 0; j < e.range.getNumColumns(); j++) {
        var cell = e.range.getCell(i+1, j+1);
        var pr = editRow + i - startRow;
        var pc = editCol + j - startCol;

        if (pr >= 0 && pr < 9 && pc >= 0 && pc < 9) {
          if (puzzle[pr][pc] !== 0) {
            cell.setValue(puzzle[pr][pc]).setBackground("#d9d9d9");
          } else {
            cell.setBackground(null);
          }
        }
      }
    }

    // // Ki·ªÉm tra th·∫Øng cu·ªôc
    // var isComplete = true;
    // for (var r = 0; r < 9; r++) {
    //   for (var c = 0; c < 9; c++) {
    //     var val = sheet.getRange(startRow + r, startCol + c).getValue();
    //     if (Number(val) !== solution[r][c]) {
    //       isComplete = false;
    //       break;
    //     }
    //   }
    //   if (!isComplete) break;
    // }

    // props.setProperty("SUDOKU_STATUS", isComplete ? "win" : "idle");

  } catch (err) {
    Logger.log("onEdit error: " + err);
  }
}




